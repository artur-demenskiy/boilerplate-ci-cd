name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main, development ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.12.3'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Main checks for all events
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run linting
        run: pnpm lint
      
      - name: Check formatting
        run: pnpm format:check
      
      - name: Run unit tests
        run: pnpm test
      
      - name: Run e2e tests
        run: pnpm test:e2e
      
      - name: Build application
        run: pnpm build

  # Docker build for all events
  docker-build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        run: |
          docker build -t app:test .
          docker images
      
      - name: Test Docker image
        run: |
          docker run --rm -d --name test-app -p 3000:3000 app:test
          sleep 10
          curl -f http://localhost:3000/ || exit 1
          docker stop test-app

  # Security scan for all events
  security-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run security audit
        run: pnpm audit
      
      - name: Check for outdated packages
        run: pnpm outdated || true

  # Deploy to development environment (only on push to development)
  deploy-development:
    runs-on: ubuntu-latest
    needs: [lint-and-test, docker-build, security-scan]
    if: github.ref == 'refs/heads/development'
    environment: development
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push Docker image for development
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:development .
          echo "Docker image built successfully for development"
      
      - name: Deploy to development
        run: |
          echo "Deploying to development environment..."
          echo "Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:development"
          # Add your deployment commands for development

  # Deploy to production (only on push to main)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [lint-and-test, docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push Docker image for production
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          echo "Docker image built successfully for production"
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          # Add your deployment commands for production 